//=============================================================================
//
// フェード処理 [fade.h]
// Author :KIMURA KOUTA
//
//=============================================================================
#ifndef _FADE_H_
#define _FADE_H_

#define _CRT_SECURE_NO_WARNINGS

//=============================================================================
// インクルードファイル
//=============================================================================
#include "main.h"
#include "manager.h"

//================================================================
// レンダリングクラス
//================================================================
class CFade
{
public:

	//=============================================================================
	// フェードの状態
	//=============================================================================
	typedef enum
	{
		FADE_NONE = 0,		// 何もない状態
		FADE_IN,			// フェードイン処理
		FADE_OUT,			// フェードアウト処理
		FADE_MAX
	} FADE;

	//====================================================================================================
	// 構造体定義
	//=====================================================================================================
	typedef struct
	{
		D3DXVECTOR3 pos;	//ポジション
		float       rhw;	//1で固定する
		D3DCOLOR    col;	//色
		D3DXVECTOR2 tex;	//テクスチャ情報
	}VERTEX_2D;

	//=============================================================================
	// プロトタイプ宣言
	//=============================================================================
	void InitFade(void);
	void UninitFade(void);
	void UpdateFade(void);
	void DrawFade(void);

	static void SetFade(CManager::MODE modeNext);
	static FADE GetFade(void);
	CFade *Create(void);

private:

	LPDIRECT3DTEXTURE9		m_pTextureFade = NULL;		// テクスチャへのポインタ
	LPDIRECT3DVERTEXBUFFER9 m_pVtxBuffFade = NULL;		// 頂点バッファへのポインタ
	static FADE				m_fade;						// フェード状態
	static CManager::MODE	m_modeNext;					// 次の画面（モード）
	static D3DXCOLOR		m_colorFade;				// フェード色

	int nCntDelay = 0;
};
#endif
