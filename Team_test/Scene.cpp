//====================================================================================================
//
// レンダリング (Scene.cpp)
// Author (Kimura kouta)
//
//====================================================================================================
#include "Scene.h"

//====================================================================================================
// マクロ定義
//==================================================================================================== 

//====================================================================================================
// プロトタイプ宣言
//====================================================================================================

//====================================================================================================
// 静的メンバ変数の初期化
//====================================================================================================
int CScene::nNumAll = 0;
CScene *CScene::m_apScene[OBJTYPE_MAX][MAX_POLYGON] = {};

//====================================================================================================
// コンストラクタ
//====================================================================================================
CScene::CScene(OBJTYPE nPriority)
{
	m_bID = 0;

	for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
	{
		if (m_apScene[nPriority][nCount] == NULL)
		{
			m_apScene[nPriority][nCount] = this;
			nNumAll++;
			m_bID = nCount;
			objType = nPriority;
			break;
		}
	}
}

//====================================================================================================
// コンストラクタ
//====================================================================================================
CScene::CScene()
{

}

//====================================================================================================
// すべての終了処理
//====================================================================================================
void CScene::ReleaseAll(void)
{
	for (int nCntPriority = 0; nCntPriority < OBJTYPE_MAX; nCntPriority++)
	{
		for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
		{
			if (m_apScene[nCntPriority][nCount] != NULL)
			{
				m_apScene[nCntPriority][nCount]->Uninit();

				if (m_apScene[nCntPriority][nCount] != NULL)
				{
					m_apScene[nCntPriority][nCount]->Release();
				}
			}
		}
	}
}

//====================================================================================================
// 更新処理
//====================================================================================================
void CScene::UpdateAll(void)
{
	for (int nCntPriority = 0; nCntPriority < OBJTYPE_MAX; nCntPriority++)
	{
		for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
		{
			if (m_apScene[nCntPriority][nCount] != NULL)
			{
				m_apScene[nCntPriority][nCount]->Update();
			}
		}
	}
}

//====================================================================================================
// 描画処理
//====================================================================================================
void CScene::DrawAll(void)
{
	for (int nCntPriority = 0; nCntPriority < OBJTYPE_MAX; nCntPriority++)
	{
		for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
		{
			if (m_apScene[nCntPriority][nCount] != NULL)
			{
				m_apScene[nCntPriority][nCount]->Draw();
			}
		}
	}
}

//====================================================================================================
// 終了処理
//====================================================================================================
void CScene::Release(void)
{
	int nID;
	OBJTYPE nPriority;
	nID = m_bID;
	nPriority = objType;

    if (m_apScene[nPriority][nID] != NULL)
	{
		//m_apScene[nPriority][nID]->Uninit();
		delete m_apScene[nPriority][nID];
		m_apScene[nPriority][nID] = NULL;
		nNumAll--;
	}
}

//====================================================================================================
// オブジェクトの設定
//====================================================================================================
void CScene::SetObjType(OBJTYPE Type)
{
	objType = Type;
}

//====================================================================================================
// オブジェクトの取得
//====================================================================================================
CScene::OBJTYPE CScene::GetObjType(void)
{
	return objType;
}

//====================================================================================================
// オブジェクトの取得
//====================================================================================================
CScene *CScene::GetScene(OBJTYPE nPriority,int bID)
{
	return m_apScene[nPriority][bID];
}

//====================================================================================================
// デストラクタ
//=====================================================================================================
CScene::~CScene()
{

}