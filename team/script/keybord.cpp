//=============================================================================
//
// キーボード処理 [keybord.cpp]
// Author :  Kimura Kouta
//
//=============================================================================
#include "keybord.h"

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CKeybord::CKeybord()
{
	BYTE m_aKeyState[NUM_KEY_MAX] = {};
	BYTE m_aKeystateTrigger[NUM_KEY_MAX] = {};
}

//=============================================================================
// キーボードの初期化
//=============================================================================
HRESULT CKeybord::Init(HINSTANCE hInstance, HWND hWnd)
{

	CInput::Init(hInstance, hWnd);

	return S_OK;
}

//=============================================================================
// キーボードの終了処理
//=============================================================================
void  CKeybord::Uninit(void)
{
	CInput::Uninit();
}

//=============================================================================
// キーボードの更新処理
//=============================================================================
void CKeybord::Update(void)
{
	int nCntKey;
	BYTE aKeystate[NUM_KEY_MAX];

	LPDIRECTINPUTDEVICE8 m_pDevKeyboard = CInput::GetDevKeyboard();

	// デバイスからデータを取得
	if (SUCCEEDED(m_pDevKeyboard->GetDeviceState(sizeof(aKeystate), aKeystate)))
	{
		for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			m_aKeystateTrigger[nCntKey] = aKeystate[nCntKey] ^ m_aKeyState[nCntKey] & aKeystate[nCntKey];
			m_aKeyState[nCntKey] = aKeystate[nCntKey];
		}
	}
	else
	{
		m_pDevKeyboard->Acquire();
	}
}

//=============================================================================
// キーボードのプレス状態を取得
//=============================================================================
bool CKeybord::GetKeyboardPress(int nKey)
{
	return(m_aKeyState[nKey] & 0x80) ? true : false;
}
//=============================================================================
// キーボードのプレス状態を取得(スペーストリガー用)
//=============================================================================
bool CKeybord::GetKeyboardTrigger(int nKey)
{
	return(m_aKeystateTrigger[nKey] & 0x80) ? true : false;
}

//====================================================================================================
// デストラクタ
//====================================================================================================
CKeybord::~CKeybord()
{

}