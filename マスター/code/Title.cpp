//====================================================================================================
//
// 背景処理 (Title.cpp)
// Author  Kimura Kouta
//
//====================================================================================================
#include"Title.h"//インクルードファイル
#include"manager.h"
#include"renderer.h"
#include"input.h"
#include"keybord.h"
#include"Texture.h"
#include "light.h"
#include "pad.h"

//================================================================================================
// マクロ定義
//================================================================================================

//================================================================================================
// 前方宣言初期化
//================================================================================================
CManager *CTitle::m_pManager = NULL;
CLight*CTitle::m_pLight = NULL;

//================================================================================================
// コンストラクタ
//================================================================================================
CTitle::CTitle()
{

}

//================================================================================================
// デストラクタ
//================================================================================================
CTitle::~CTitle()
{

}

//================================================================================================
// 背景の初期化
//================================================================================================
HRESULT CTitle::Init(void)
{
	m_pLight = CLight::Create();
	CTexture::Load();

	CTexture::Create(D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXCOLOR(0.9f, 0.9f, 0.9f, 1.0f), 1280.0f, 720.0f, CTexture::TYPE_TITLEBG);


	CTexture::Create(D3DXVECTOR3(100.0f, 300.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 300.0f, 300.0f, CTexture::TYPE_SELECTKENICON);
	CTexture::Create(D3DXVECTOR3(500.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 300.0f, 300.0f, CTexture::TYPE_SELECTKANGAROOICON);
	CTexture::Create(D3DXVECTOR3(900.0f, 300.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 300.0f, 300.0f, CTexture::TYPE_SELECTSWORDICON);

	CTexture::Create(D3DXVECTOR3(150.0f, 200.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 900.0f, 500.0f, CTexture::TYPE_TITLELOG);

	return S_OK;
}

//================================================================================================
// 背景の開放処理
//================================================================================================
void CTitle::Uninit(void)
{
	CTexture::Unload();

}

//================================================================================================
// 背景の更新処理
//================================================================================================
void CTitle::Update(void)
{
	CKeybord *pKetybord = CManager::GetKeybord();
	CPad *pGamePad = CManager::GetPad();

	if (CFade::GetFade() == CFade::FADE_NONE)
	{
		if (pKetybord->GetKeyboardTrigger(DIK_RETURN) || pGamePad->GetJoypadPress(0, CPad::JOYPADKEY_X))
		{
			CFade::SetFade(m_pManager->MODE_SELECTSCREEN);
		}
	}
}

//================================================================================================
// 背景の描画処理
//================================================================================================
void CTitle::Draw(void)
{

}

//================================================================================================
// タイトル処理
//================================================================================================
CTitle * CTitle::Create(void)
{
	CTitle *pTitle;

	pTitle = new CTitle();

	pTitle->Init();

	return pTitle;
}

//================================================================================================
// 読み込み処理
//================================================================================================
HRESULT CTitle::Load(void)
{
	//CRenderer *pRenderer = CManager::GetRenderer();
	//LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	////テクスチャの読み込み
	//D3DXCreateTextureFromFile(
	//	pDevice,
	//	TEXTUER_008,
	//	&m_pTextureNeutral[0]);

	return S_OK;
}

//================================================================================================
// 破棄の処理
//================================================================================================
void CTitle::Unload(void)
{
	//for (int nCnt = 0; nCnt < MAX_TEXENEMY; nCnt++)
	//{
	//	// 頂点バッファの開放
	//	if (m_pTextureNeutral[nCnt] != NULL)
	//	{
	//		m_pTextureNeutral[nCnt]->Release();
	//		m_pTextureNeutral[nCnt] = NULL;
	//	}
	//}
}
