//=============================================================================
//
// モデル処理 [hitmodel.cpp]
// Author : KOUAT KIMURA
//
//=============================================================================

//=============================================================================
// インクルードファイル
//=============================================================================
#include "hitmodel.h"
#include "camera.h"
#include "manager.h"
#include "renderer.h"
#include "playerbase.h"

//=============================================================================
// メンバ変数初期化
//=============================================================================
#define MODELFILE0		"DATA/MODEL/HitModel.x"					// 読み込むモデル
#define MAX_HITMODEL		(1)									// モデルの数

CHitModel::shape	CHitModel::ShapeBase = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CHitModel::CHitModel(OBJTYPE type) : CHitModelBase(type)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CHitModel::~CHitModel()
{
}

//=============================================================================
// モデルの生成
//=============================================================================
CHitModel * CHitModel::Create(CPlayerBase *pplayer, D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CHitModel *pHitModel;
	pHitModel = new CHitModel(OBJTYPE_BG);
	pHitModel->BindHitModel(ShapeBase.nNumMat, ShapeBase.pMesh, ShapeBase.pBuffMat);
	pHitModel->Init(pos, scale);
	pHitModel->m_pPlayer = pplayer;

	return pHitModel;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CHitModel::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CHitModelBase::Init();


	CHitModelBase::SetPos(pos);
	CHitModelBase::Setsize(scale);


	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CHitModel::Uninit(void)
{
	CHitModelBase::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CHitModel::Update(void)
{
	CHitModelBase::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CHitModel::Draw(void)
{
	CHitModelBase::Draw();
}

//========================================================================================================
// モデルの読み込み処理
//========================================================================================================
HRESULT CHitModel::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// Xファイルの読み込み
	D3DXLoadMeshFromX(MODELFILE0, D3DXMESH_SYSTEMMEM, pDevice, NULL,
		&ShapeBase.pBuffMat, NULL,
		&ShapeBase.nNumMat,
		&ShapeBase.pMesh);

	return S_OK;
}

//========================================================================================================
// モデルの解放処理
//========================================================================================================
void CHitModel::Unload(void)
{

}
