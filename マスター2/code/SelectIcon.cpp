//====================================================================================================
//
// マーカー処理 (maker.cpp)
// Author (Kimura kouta)
//
//====================================================================================================
#include "SelectIcon.h"
#include "renderer.h"
#include "manager.h"
#include "Game.h"
#include "player_Ken.h"
#include "keybord.h"

//====================================================================================================
// マクロ定義
//====================================================================================================
#define BULLET_SIZE (40)
#define MAX_LIFE (40)
#define MAKERTEX_01 "DATA/TEX/arrow_1p.png"					//読み込むテクスチャファイル名
#define MAKERTEX_02 "DATA/TEX/arrow_2p.png"					//読み込むテクスチャファイル名
#define MAKERTEX_03 "DATA/TEX/arrow_3p.png"					//読み込むテクスチャファイル名
#define MAKERTEX_04 "DATA/TEX/arrow_4p.png"					//読み込むテクスチャファイル名

//====================================================================================================
// プロトタイプ宣言
//====================================================================================================

//====================================================================================================
// グローバル変数
//====================================================================================================
LPDIRECT3DTEXTURE9 CSelectIcon::m_pTextureIcon[ICON_MAX] = {};



//====================================================================================================
// コンストラクタ
//====================================================================================================
CSelectIcon::CSelectIcon(OBJTYPE type) : CScene2D(type)
{
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CSelectIcon::Init(D3DXVECTOR3 pos)
{

	SetPos(pos);
	SetSize(250.0f, 250.0f);
	SetColor(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));

	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	m_PlayerType = {};

	CScene2D::Init();

	return S_OK;
}

//==================================================================================================
//終了処理
//===================================================================================================
void CSelectIcon::Uninit(void)
{
	CScene2D::Uninit();
}

//====================================================================================================
//更新処理
//=====================================================================================================
void CSelectIcon::Update(void)
{
	CKeybord *pKeyboard = CManager::GetKeybord();

	D3DXVECTOR3 pos = CScene2D::GetPos();

	pos += m_move;

	//慣性処理
	m_move.x += (0 - m_move.x) * 1 / 4;
	m_move.y += (0 - m_move.y) * 1 / 4;

	if (pos.x <= -50)
	{
		pos.x = -50;
	}

	if (pos.x >= 1100)
	{
		pos.x = 1100;
	}

	if (pos.y <= -56)
	{
		pos.y = -56;
	}

	if (pos.y >= 544)
	{
		pos.y = 544;
	}

	CScene2D::SetPos(pos);

	CScene2D::Update();
}
//========================================================================================================
// 描画処理
//========================================================================================================
CSelectIcon *CSelectIcon::Create(D3DXVECTOR3 pos, ICON Icon)
{
	CSelectIcon *pMaker;

	pMaker = new CSelectIcon(OBJTYPE_ANIMATION);

	pMaker->BindTexture(m_pTextureIcon[Icon]);
	pMaker->m_Icon = Icon;

	pMaker->Init(pos);

	return pMaker;
}

//========================================================================================================
// テクスチャの読み込み
//========================================================================================================
HRESULT CSelectIcon::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		MAKERTEX_01,
		&m_pTextureIcon[ICON_1P]);

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		MAKERTEX_02,
		&m_pTextureIcon[ICON_2P]);

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		MAKERTEX_03,
		&m_pTextureIcon[ICON_3P]);

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		MAKERTEX_04,
		&m_pTextureIcon[ICON_4P]);

	return S_OK;
}
//=======================================================================================================
// テクスチャの破棄
//========================================================================================================
void CSelectIcon::Unload(void)
{
	for (int nCnt =0; nCnt < ICON_MAX; nCnt++)
	{
		// 頂点バッファの開放
		if (m_pTextureIcon[nCnt] != NULL)
		{
			m_pTextureIcon[nCnt]->Release();
			m_pTextureIcon[nCnt] = NULL;
		}
	}
}

//========================================================================================================
// 描画処理
//========================================================================================================
void CSelectIcon::Draw(void)
{
	CScene2D::Draw();
}

//====================================================================================================
// デストラクタ
//=====================================================================================================
CSelectIcon::~CSelectIcon()
{

}