//====================================================================================================
//
// ゲージ処理 (gauge.cpp)
// Author (Kimura kouta)
//
//====================================================================================================
#include "gauge.h"
#include "renderer.h"
#include "manager.h"
#include "Game.h"
#include "Scene3D.h"


//====================================================================================================
// マクロ定義
//====================================================================================================
#define BULLET_SIZE (40)
#define MAX_LIFE (40)

//====================================================================================================
// プロトタイプ宣言
//====================================================================================================

//====================================================================================================
// グローバル変数
//====================================================================================================
LPDIRECT3DTEXTURE9 CGauge::m_pTextureGauge[MAX_TEXGAUGE] = {};

//====================================================================================================
// コンストラクタ
//====================================================================================================
CGauge::CGauge(OBJTYPE type) : CScene2D(type)
{
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nLife = 0;
}

CGauge::CGauge()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CGauge::Init(D3DXVECTOR3 pos, int Life, CMaker::MAKERTYPE MAKERTYPE)
{
	CScene2D::Init();

	m_nLife = Life;

	PlayerType = MAKERTYPE;

	SetPos(pos);
	SetColor(D3DXCOLOR(0.0f, 1.0f, 0.0f, 1.0f));

	return S_OK;
}

//==================================================================================================
//終了処理
//===================================================================================================
void CGauge::Uninit(void)
{
	CScene2D::Uninit();
}

//====================================================================================================
//更新処理
//=====================================================================================================
void CGauge::Update(void)
{
	//CScene2D::Update();

	UIUpdate(m_nLife, 3.5f, 30.0f);
	//for (int nCntModel = 0; nCntModel < MAX_POLYGON; nCntModel++)
	//{
	//	CScene *pScene;

	//	pScene = CScene::GetScene(OBJTYPE_PLAYER, nCntModel);



	//	if (!pScene)
	//		continue;

	//	CPlayerBase *pPlayer = (CPlayerBase*)pScene;


	//	if (pPlayer->GetTypeChara() == PlayerType)
	//	{
	//		m_nLife = pPlayer->GetLife();
	//		break;
	//	}
	//}

	if (m_nLife <= 0)
	{
		Release();
	}
}

//========================================================================================================
// 描画処理
//========================================================================================================
void CGauge::GaugeLife(int nDamage)
{
	m_nLife -= nDamage;
}

//========================================================================================================
// 描画処理
//========================================================================================================
CGauge *CGauge::Create(D3DXVECTOR3 pos, int Life, CMaker::MAKERTYPE MAKERTYPE)
{
	CGauge *pGauge;

	pGauge = new CGauge(OBJTYPE_ANIMATION);

	pGauge->BindTexture(m_pTextureGauge[0]);

	pGauge->Init(pos, Life, MAKERTYPE);

	return pGauge;
}

//========================================================================================================
// テクスチャの読み込み
//========================================================================================================
HRESULT CGauge::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(
		pDevice,
		"DATA/TEX/1HPbar.png",
		&m_pTextureGauge[0]);

	return S_OK;
}
//=======================================================================================================
// テクスチャの破棄
//========================================================================================================
void CGauge::Unload(void)
{
	for (int nCnt = 0; nCnt < MAX_TEXGAUGE; nCnt++)
	{
		// 頂点バッファの開放
		if (m_pTextureGauge[nCnt] != NULL)
		{
			m_pTextureGauge[nCnt]->Release();
			m_pTextureGauge[nCnt] = NULL;
		}
	}
}

//========================================================================================================
// 描画処理
//========================================================================================================
void CGauge::Draw(void)
{
	CScene2D::Draw();
}

//====================================================================================================
// デストラクタ
//=====================================================================================================
CGauge::~CGauge()
{

}